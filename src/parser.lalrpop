use crate::ast::*;

grammar;


pub Args: Vec<Term> = {
    <var:Var> "," <args:Args> => {
        let mut args = args;
        args.push(Term::Var(var));
        args
    },
    <a:Atom> "," <args:Args> => {
        let mut args = args;
        args.push(Term::Atom(a));
        args
    },
    <structure:Structure> "," <args:Args> => {
        let mut args = args;
        args.push(Term::Structure(structure));
        args
    },
    <v:Var> ")" => {
        let args = vec![Term::Var(v)];
        args
    },
    <a:Atom> ")" => {
        let args = vec![Term::Atom(a)];
        args
    },
    <s:Structure> ")" => {
        let args = vec![Term::Structure(s)];
        args
    }
};

pub Body: Vec<Structure> = {
    <a:Atom> "," <body:Body> => {
        let mut body = body;
        body.push(Term::Atom(a).structuralize().unwrap());
        body
    },
    <structure:Structure> "," <body:Body> => {
        let mut body = body;
        body.push(Term::Structure(structure).structuralize().unwrap());
        body
    },
    <a:Atom> "." => {
        let body = vec![Term::Atom(a).structuralize().unwrap()];
        body
    },
    <s:Structure> "." => {
        let body = vec![Term::Structure(s).structuralize().unwrap()];
        body
    }
};

pub Atom: Atom = {
    // unquoted atoms
    <r"[a-z]+[A-Za-z_0-9]*"> => Atom(<>.parse().unwrap()),
    // quoted atoms
    <r"'[A-Za-z0-9_]*'"> => Atom(<>.parse().unwrap())
};

pub Var: Var = {
    // leading underscore variables (anonymous)
    <r"_[A-Za-z0-9_]+"> => Var(String::from(<>)),
    // Capital first variables
    <r"[A-Z][A-Za-z0-9_]*"> => Var(String::from(<>))
};

pub FunctorName: String = {
    <name:r"[a-z]+[A-Za-z_0-9]*\("> => {
        let s = &name[..name.len()-1];

        String::from(s)
    }
};

pub Structure: Structure = {
    <name:FunctorName> <args:Args> => {
        let arity = args.len();
        let mut args = args;
        args.reverse();

        assert!(arity > 0);

        Structure { name: name, arity: arity, args: args }
    }
};

pub Expression: Term = {
    <Atom> "." => Term::Atom(<>),
    <Var> "." => Term::Var(<>),
    <Structure> "." => Term::Structure(<>),
    <head:Atom> ":-" <body:Body> => {
        let head = head.structuralize().unwrap();
        let mut body = body;
        body.reverse();
        let rule = Rule { head: head, body: body };
        Term::Rule(rule)
    },
    <head:Structure> ":-" <body:Body> => {
        let mut body = body;
        body.reverse();
        let rule = Rule { head: head, body: body };
        Term::Rule(rule)
    }
}