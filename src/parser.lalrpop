use std::str::FromStr;
use crate::ast::*;

grammar;


pub Comma: &'input str = {
    ","
};

pub Args: Vec<Term> = {
    <var:Var> <c:Comma> <args:Args> => {
        let mut args = args;
        args.push(Term::VarTerm(var));
        args
    },
    <n:Number> <c:Comma> <args:Args> => {
        let mut args = args;
        args.push(Term::NumberTerm(n));
        args
    },
    <a:Atom> <c:Comma> <args:Args> => {
        let mut args = args;
        args.push(Term::AtomTerm(a));
        args
    },
    <compound:Compound> <c:Comma> <args:Args> => {
        let mut args = args;
        args.push(Term::CompoundTerm(compound));
        args
    },
    <v:Var> ")" => {
        let mut args = vec![Term::VarTerm(v)];
        args
    },
    <n:Number> ")" => {
        let mut args = vec![Term::NumberTerm(n)];
        args
    },
    <a:Atom> ")" => {
        let mut args = vec![Term::AtomTerm(a)];
        args
    },
    <c:Compound> ")" => {
        let mut args = vec![Term::CompoundTerm(c)];
        args
    }
};

pub Atom: Atom = {
    // unquoted atoms
    <r"[a-z]+[A-Za-z_0-9]*"> => Atom(<>.parse().unwrap()),
    // quoted atoms
    <r"'[A-Za-z0-9_]*'"> => Atom(<>.parse().unwrap())
};

pub Number: Number = {
    // integers
    <r"[0-9]+"> => Number::Integer(<>.parse().unwrap()),
    // floats
    <r"[0-9]+\.[0-9]+"> => Number::Float(<>.parse().unwrap())
};

pub Var: Var = {
    // leading underscore variables (anonymous)
    <r"_[A-Za-z0-9_]+"> => Var(String::from(<>)),
    // Capital first variables
    <r"[A-Z][A-Za-z0-9_]*"> => Var(String::from(<>))
};

pub FunctorName: String = {
    <name:r"[a-z]+[A-Za-z_0-9]*\("> => {
        let s = &name[..name.len()-1];

        String::from(s)
    }
};

pub Compound: Compound = {
    <name:FunctorName> <args:Args> => {
        let arity = args.len();
        let mut args = args;
        args.reverse();

        Compound { name: name, arity: arity, args: args }
    }
};